import sys, io, locale, os, signal, atexit
import requests, time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ =====
if sys.platform.startswith('win'):
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
else:
    locale.setlocale(locale.LC_ALL, 'C.UTF-8')
    os.environ['PYTHONIOENCODING'] = 'utf-8'

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ =====
script_running = True
start_time = None

# ===== –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã =====
TELEGRAM_TOKEN = "7557152702:AAEvMNfzLYWpkSdn7aXJp5qpPMR7aVySbE4"
TELEGRAM_CHAT_ID = 588116427
SPUTNIK_API_TOKEN = "1IWIwoxDUbCGEEZR6Lj6ExOY51U"

EXCLUDED_ORG_NAMES = ["ZZCameras"]

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ =====
def signal_handler(signum, frame):
    global script_running
    print(f"\n‚ùå –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    script_running = False
    sys.exit(0)

def cleanup():
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    requests.Session().close()

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)
atexit.register(cleanup)

# ===== Telegram =====
async def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    max_length = 4000
    parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
    for part in parts:
        try:
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(part)} —Å–∏–º–≤–æ–ª–æ–≤...")
            requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": part}, timeout=30)
            time.sleep(0.5)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π GET —Å retries =====
def get_json_with_retries(url, headers=None, retries=3, timeout=15):
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry
    session = requests.Session()
    retry_strategy = Retry(total=retries, backoff_factor=0.5,
                           status_forcelist=[429,500,502,503,504], connect=2, read=2)
    adapter = HTTPAdapter(max_retries=retry_strategy, pool_connections=10, pool_maxsize=10)
    session.mount("http://", adapter)
    session.mount("https://", adapter)

    for attempt in range(retries):
        try:
            resp = session.get(url, headers=headers, timeout=(5, timeout))
            resp.raise_for_status()
            return resp.json()
        except Exception as e:
            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < retries - 1:
                time.sleep(1)
            else:
                raise
    session.close()
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url}")

# ===== –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ =====
def fetch_all_items(base_url, headers, limit=100):
    offset = 0
    all_items = []
    page_count = 0
    while True:
        page_count += 1
        url = f"{base_url}&limit={limit}&offset={offset}"
        data = get_json_with_retries(url, headers=headers, timeout=10)
        if not isinstance(data, list) or not data:
            break
        all_items.extend(data)
        if len(data) < limit:
            break
        offset += limit
        time.sleep(0.1)
    return all_items

# ===== Sputnik API =====
def get_organizations():
    url = "https://cameras.sputnik.systems/vsaas/api/v2/organizations?dummy=1"
    headers = {"Authorization": f"Bearer {SPUTNIK_API_TOKEN}"}
    return fetch_all_items(url, headers)

def get_cameras_for_org(org_id):
    url = f"https://cameras.sputnik.systems/vsaas/api/v2/cameras?organization_id={org_id}"
    headers = {"Authorization": f"Bearer {SPUTNIK_API_TOKEN}"}
    try:
        cameras = fetch_all_items(url, headers)
        print(f"üìπ –ü–æ–ª—É—á–µ–Ω–æ {len(cameras)} –∫–∞–º–µ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_id}")
        return cameras
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–µ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_id}: {e}")
        return []

def format_archive_duration(dvr_depth):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞—Ä—Ö–∏–≤–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if dvr_depth == 0:
        return "0 –¥–Ω–µ–π"
    elif dvr_depth < 1:
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –¥–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—ã
        hours = int(dvr_depth * 24)
        return f"{hours}—á"
    elif dvr_depth == int(dvr_depth):
        # –ï—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
        return f"{int(dvr_depth)} –¥–Ω–µ–π"
    else:
        # –ï—Å–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π
        days = int(dvr_depth)
        hours = int((dvr_depth - days) * 24)
        if hours == 0:
            return f"{days} –¥–Ω–µ–π"
        else:
            return f"{days}–¥ {hours}—á"

def format_offline_time(cam_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è, —Å–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä—ã
    time_fields = [
        'last_activity',
        'last_seen', 
        'last_online',
        'last_connection',
        'last_ping',
        'last_update',
        'updated_at',
        'created_at',
        'timestamp'
    ]
    
    last_activity = None
    found_field = None
    
    for field in time_fields:
        if field in cam_data and cam_data[field]:
            last_activity = cam_data[field]
            found_field = field
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏: {field} = {last_activity}")
            break
    
    if not last_activity:
        print(f"‚ö†Ô∏è –ü–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è offline —Å—Ç–∞—Ç—É—Å–∞")
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        from datetime import datetime
        import time
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ last_activity –≤ Unix timestamp
        if isinstance(last_activity, (int, float)):
            last_time = datetime.fromtimestamp(last_activity)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
            last_time = datetime.fromisoformat(str(last_activity).replace('Z', '+00:00'))
        
        now = datetime.now()
        time_diff = now - last_time
        
        total_seconds = int(time_diff.total_seconds())
        
        if total_seconds < 60:
            return f"{total_seconds}—Å"
        elif total_seconds < 3600:
            minutes = total_seconds // 60
            return f"{minutes}–º"
        elif total_seconds < 86400:
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            if minutes == 0:
                return f"{hours}—á"
            else:
                return f"{hours}—á {minutes}–º"
        else:
            days = total_seconds // 86400
            hours = (total_seconds % 86400) // 3600
            if hours == 0:
                return f"{days}–¥"
            else:
                return f"{days}–¥ {hours}—á"
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ offline: {e}")
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def check_camera_status(cam):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–µ—Ä—ã"""
    problems = []
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    cam_name = cam.get("name") or cam.get("title") or cam.get("id") or "Unknown"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    stream_status = cam.get("stream_status", {})
    connection_status = cam.get("connection_status", {})
    recording_status = cam.get("recording_status", {})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    is_online = False
    if stream_status.get("alive", False):
        is_online = True
    elif connection_status.get("connected", False):
        is_online = True
    elif stream_status.get("status") == "active":
        is_online = True
    
    if not is_online:
        problems.append("‚ùå –ù–µ –æ–Ω–ª–∞–π–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞ - –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è
    has_archive = False
    archive_problems = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –∞—Ä—Ö–∏–≤–∞
    dvr_depth = cam.get("dvr_depth", 0)
    archive_size = cam.get("archive_size", 0)
    recording_enabled = cam.get("recording_enabled", False)
    
    if dvr_depth > 0:
        has_archive = True
    elif archive_size > 0:
        has_archive = True
    elif recording_enabled:
        has_archive = True
    elif recording_status.get("active", False):
        has_archive = True
    
    if not has_archive:
        archive_problems.append("‚ùå –ù–µ –ø–∏—à–µ—Ç")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if dvr_depth == 0:
            archive_problems.append("(dvr_depth=0)")
        if not recording_enabled:
            archive_problems.append("(–∑–∞–ø–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    
    problems.extend(archive_problems)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
    signal_quality = cam.get("signal_quality", {})
    if signal_quality.get("level", 100) < 50:
        problems.append("‚ö†Ô∏è –°–ª–∞–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    last_activity = cam.get("last_activity")
    offline_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if last_activity:
        try:
            from datetime import datetime, timedelta
            import time
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ last_activity –≤ Unix timestamp
            last_time = datetime.fromtimestamp(last_activity)
            if datetime.now() - last_time > timedelta(hours=1):
                problems.append("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ >1—á")
        except:
            pass
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è offline
    if not is_online:
        offline_time = format_offline_time(cam)
    
    return {
        "is_online": is_online,
        "has_archive": has_archive,
        "problems": problems,
        "dvr_depth": dvr_depth,
        "recording_enabled": recording_enabled,
        "archive_duration": format_archive_duration(dvr_depth),
        "offline_time": offline_time
    }

def build_report_for_org(org_name, cameras):
    if not cameras:
        return None
    problem_lines = []
    no_archive_count = 0
    offline_count = 0
    archive_durations = []
    
    for cam in cameras:
        cam_name = cam.get("name") or cam.get("title") or cam.get("label") or cam.get("id") or "(–ë–µ–∑ –∏–º–µ–Ω–∏)"
        status = check_camera_status(cam)
        
        if not status["is_online"]:
            offline_count += 1
        if not status["has_archive"]:
            no_archive_count += 1
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –∞—Ä—Ö–∏–≤–∞
        archive_durations.append(status["archive_duration"])
            
        if status["problems"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –∞—Ä—Ö–∏–≤–∞ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º
            problems_with_archive = []
            for problem in status["problems"]:
                if "–ù–µ –ø–∏—à–µ—Ç" in problem:
                    problems_with_archive.append(f"{problem} {status['archive_duration']}")
                elif "–ù–µ –æ–Ω–ª–∞–π–Ω" in problem:
                    # –î–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –∫–∞–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è offline
                    offline_info = f" {status['offline_time']}" if status['offline_time'] != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else ""
                    problems_with_archive.append(f"{problem}{offline_info}")
                else:
                    problems_with_archive.append(problem)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏–≤–µ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            archive_info = f" ({status['archive_duration']} –∞—Ä—Ö–∏–≤–∞)"
            problem_lines.append(f"üìç {cam_name} ‚Äî {', '.join(problems_with_archive)}{archive_info}")
    
    if not problem_lines:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if archive_durations:
        # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞ (—Å–∞–º—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é)
        min_archive = min(archive_durations)
    else:
        min_archive = "0 –¥–Ω–µ–π"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    if no_archive_count == len(cameras):
        return {"type": "no_archive_all", "org_name": org_name, "archive_duration": min_archive}
    if offline_count == len(cameras):
        return {"type": "all_offline", "org_name": org_name}
    
    report = f"====================\nüè¢ {org_name}\n====================\n"
    report += "\n".join(problem_lines)
    return {"type": "normal", "content": report}

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–µ—Ä...")
    
    try:
        orgs = get_organizations()
        print(f"üè¢ –ü–æ–ª—É—á–µ–Ω–æ {len(orgs)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    except Exception as e:
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {e}")
        return
    
    problem_reports = []
    no_archive_orgs = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    no_archive_orgs = []
    all_offline_orgs = []
    
    for org in orgs:
        org_name = org.get("name") or org.get("title") or org.get("label")
        org_id = org.get("id")
        if not org_name or not org_id or org_name in EXCLUDED_ORG_NAMES:
            continue
        cams_data = get_cameras_for_org(org_id)
        if not cams_data:
            continue
        report = build_report_for_org(org_name, cams_data)
        if report:
            if report["type"] == "no_archive_all":
                no_archive_orgs.append(report)
            elif report["type"] == "all_offline":
                all_offline_orgs.append(report["org_name"])
            else:
                problem_reports.append(report["content"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if all_offline_orgs:
        msg = f"üö® –í–°–ï –ö–ê–ú–ï–†–´ –û–§–§–õ–ê–ô–ù:\n\n" + "\n".join([f"üè¢ {org}" for org in all_offline_orgs])
        await send_telegram_message(msg)
    
    if no_archive_orgs:
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        no_archive_lines = []
        for org_data in no_archive_orgs:
            if isinstance(org_data, dict):
                org_name = org_data["org_name"]
                archive_duration = org_data.get("archive_duration", "0 –¥–Ω–µ–π")
                no_archive_lines.append(f"üè¢ {org_name} - {archive_duration} –∞—Ä—Ö–∏–≤–∞")
            else:
                no_archive_lines.append(f"üè¢ {org_data}")
        
        msg = f"‚ùóÔ∏è –ù–ï–¢ –ê–†–•–ò–í–ê –ù–ê –í–°–ï–• –ö–ê–ú–ï–†–ê–•:\n\n" + "\n".join(no_archive_lines)
        await send_telegram_message(msg)

    if problem_reports:
        await send_telegram_message("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–º–µ—Ä—ã –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã:")
        for report in problem_reports:
            await send_telegram_message(report)
    elif not no_archive_orgs and not all_offline_orgs:
        await send_telegram_message("‚úÖ –í—Å–µ –∫–∞–º–µ—Ä—ã –æ–Ω–ª–∞–π–Ω –∏ —Å –∞—Ä—Ö–∏–≤–æ–º.")

# ===== –ö–æ–º–∞–Ω–¥–∞ /test_org =====
async def test_org(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: /test_org <org_id>")
        return
    
    org_id = context.args[0]
    await update.message.reply_text(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é {org_id}...")
    
    try:
        cams_data = get_cameras_for_org(org_id)
        if not cams_data:
            await send_telegram_message(f"‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        orgs = get_organizations()
        org_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
        for org in orgs:
            if org.get("id") == org_id:
                org_name = org.get("name") or org.get("title") or org.get("label")
                break
        
        report = build_report_for_org(org_name, cams_data)
        if report:
            if report["type"] == "no_archive_all":
                await send_telegram_message(f"‚ùóÔ∏è –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name} –ù–ï–¢ –ê–†–•–ò–í–ê –ù–ê –í–°–ï–• –ö–ê–ú–ï–†–ê–•")
            elif report["type"] == "all_offline":
                await send_telegram_message(f"üö® –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name} –í–°–ï –ö–ê–ú–ï–†–´ –û–§–§–õ–ê–ô–ù")
            else:
                await send_telegram_message(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name}:")
                await send_telegram_message(report["content"])
        else:
            await send_telegram_message(f"‚úÖ –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name} –≤—Å–µ –∫–∞–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            
    except Exception as e:
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_id}: {e}")

# ===== Main =====
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test_org", test_org))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  /start - –ø–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–º–µ—Ä")
    print("  /test_org <org_id> - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    app.run_polling()

if __name__ == "__main__":
    main()
