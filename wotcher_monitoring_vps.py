import sys, io
import locale
import os
import signal
import atexit
from datetime import datetime
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if sys.platform.startswith('win'):
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
else:
    # –î–ª—è Linux/Unix —Å–∏—Å—Ç–µ–º
    locale.setlocale(locale.LC_ALL, 'C.UTF-8')
    os.environ['PYTHONIOENCODING'] = 'utf-8'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return datetime.now(MOSCOW_TZ)

def format_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return get_moscow_time().strftime('%Y-%m-%d %H:%M:%S')

import requests
import time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
script_running = True
start_time = None

def signal_handler(signum, frame):
    global script_running
    print(f"\n‚ùå –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    script_running = False
    sys.exit(0)

def cleanup():
    print("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤...")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    import requests
    requests.Session().close()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)
atexit.register(cleanup)

# ======= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =======
API_TOKEN = os.getenv("API_TOKEN", "1IWIwoxDUbCGEEZR6Lj6ExOY51U")
API_URL = os.getenv("API_URL", "https://cameras.sputnik.systems/vsaas/api/v2")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7557152702:AAEvMNfzLYWpkSdn7aXJp5qpPMR7aVySbE4")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", 588116427)

# –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
EXCLUDED_ORG_NAMES = ["ZZCameras", "Test Organization"]

# ======= –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API =======
def get_json_with_retries(url, headers=None, retries=3, timeout=(5, 15)):
    import ssl
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    session = requests.Session()
    retry_strategy = Retry(
        total=retries,
        backoff_factor=1,
        status_forcelist=[429, 500, 502, 503, 504],
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    
    for attempt in range(retries):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            resp = session.get(url, headers=headers, timeout=timeout, verify=True)
            resp.raise_for_status()
            return resp.json()
        except (requests.exceptions.SSLError, ssl.SSLError) as e:
            print(f"‚ö† SSL –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}/{retries}: {e}")
            if attempt < retries - 1:
                time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue
            else:
                # Fallback –Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                try:
                    resp = session.get(url, headers=headers, timeout=timeout, verify=False)
                    resp.raise_for_status()
                    return resp.json()
                except Exception as fallback_e:
                    print(f"‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {fallback_e}")
                    raise e
        except Exception as e:
            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < retries - 1:
                time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            else:
                raise e
    
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")

def fetch_all_items(base_url, headers, limit=100):
    """–û–±—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    offset = 0
    all_items = []
    page_count = 0
    
    while True:
        page_count += 1
        url = f"{base_url}&limit={limit}&offset={offset}"
        print(f"üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}: {url}")
        
        try:
            data = get_json_with_retries(url, headers=headers, timeout=(5, 10))
            if not isinstance(data, list):
                print(f"‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count}: {data}")
                break
                
            if not data:
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                break
                
            all_items.extend(data)
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}: –ø–æ–ª—É—á–µ–Ω–æ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—Å–µ–≥–æ: {len(all_items)}")
            
            if len(data) < limit:
                print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} —Å {len(data)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                break
                
            offset += limit
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count}: {e}")
            break
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
    return all_items

def get_organizations():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    base_url = f"{API_URL}/organizations"
    return fetch_all_items(base_url, headers)

def get_cameras_for_org(org_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    base_url = f"{API_URL}/cameras?organization_id={org_id}"
    return fetch_all_items(base_url, headers)

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        resp = requests.post(url, data=data, timeout=(5, 10))
        resp.raise_for_status()
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:50]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def check_cameras_for_org(org_name, org_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–º–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º"""
    try:
        cams_data = get_cameras_for_org(org_id)
        if not isinstance(cams_data, list):
            return [f"‚ö† {org_name}: —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –Ω–µ —Å–ø–∏—Å–æ–∫"]
        
        if not cams_data:
            return [f"‚Ñπ {org_name}: –Ω–µ—Ç –∫–∞–º–µ—Ä"]
        
        print(f"üõ† –ü–µ—Ä–≤–∞—è –∫–∞–º–µ—Ä–∞: {cams_data[0]}")
        
        problems = []
        offline_cams = []
        no_archive_cams = []
        
        for cam in cams_data:
            cam_name = cam.get("title", cam.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            stream_status = cam.get("stream_status", {})
            if not stream_status.get("alive", False):
                offline_cams.append(cam_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤
            archive = cam.get("dvr_depth", 0) > 0
            if not archive:
                no_archive_cams.append(cam_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        if offline_cams:
            problems.append(f"‚ùå {org_name}: –∫–∞–º–µ—Ä—ã –æ—Ñ–ª–∞–π–Ω - {', '.join(offline_cams)}")
        
        if no_archive_cams:
            problems.append(f"‚ùóÔ∏è {org_name}: –Ω–µ—Ç –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –∫–∞–º–µ—Ä–∞—Ö - {', '.join(no_archive_cams)}")
        
        return problems
        
    except Exception as e:
        return [f"‚ùå {org_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}"]

# ======= –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =======
def main():
    global script_running, start_time
    start_time = time.time()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä –≤ {format_moscow_time()}")
    
    try:
        orgs = get_organizations()
        if not isinstance(orgs, list):
            raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")

        problem_reports = []
        total_orgs = len(orgs)
        processed_orgs = 0
        
        print(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_orgs} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        send_telegram_message(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–µ—Ä\n‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {format_moscow_time()}")
        
        for org in orgs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not script_running:
                print("‚ùå –°–∫—Ä–∏–ø—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                break
                
            processed_orgs += 1
            elapsed_time = time.time() - start_time
            
            # Heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if int(elapsed_time) % 30 == 0:
                print(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ {elapsed_time:.1f}—Å, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_orgs}/{total_orgs} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
            
            if elapsed_time > 300: # 5 –º–∏–Ω—É—Ç
                print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ({elapsed_time:.1f}—Å)")
                raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")
            try:
                org_name = org.get("name") or org.get("title") or org.get("label")
                org_id = org.get("id")

                if not org_name or not org_id:
                    print(f"‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ ID: {org}")
                    continue

                if org_name in EXCLUDED_ORG_NAMES:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {org_name} (id={org_id})")
                    continue

                print(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {org_name} (id={org_id})")
                cams_data = get_cameras_for_org(org_id)
                if not isinstance(cams_data, list):
                    print(f"‚ö† –ü—Ä–æ–ø—É—Å–∫ {org_name}: —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –Ω–µ —Å–ø–∏—Å–æ–∫")
                    continue
                if not cams_data:
                    print(f"‚Ñπ –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name} –Ω–µ—Ç –∫–∞–º–µ—Ä.")
                    continue

                print(f"üõ† –ü–µ—Ä–≤–∞—è –∫–∞–º–µ—Ä–∞: {cams_data[0]}")
                
                problems = []
                offline_cams = []
                no_archive_cams = []
                
                for cam in cams_data:
                    cam_name = cam.get("title", cam.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    stream_status = cam.get("stream_status", {})
                    if not stream_status.get("alive", False):
                        offline_cams.append(cam_name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤
                    archive = cam.get("dvr_depth", 0) > 0
                    if not archive:
                        no_archive_cams.append(cam_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
                if offline_cams:
                    problems.append(f"‚ùå {org_name}: –∫–∞–º–µ—Ä—ã –æ—Ñ–ª–∞–π–Ω - {', '.join(offline_cams)}")
                
                if no_archive_cams:
                    problems.append(f"‚ùóÔ∏è {org_name}: –Ω–µ—Ç –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –∫–∞–º–µ—Ä–∞—Ö - {', '.join(no_archive_cams)}")
                
                problem_reports.extend(problems)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ Telegram
                for problem in problems:
                    send_telegram_message(problem)
                    
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name}: {e}"
                print(error_msg)
                problem_reports.append(error_msg)
                send_telegram_message(error_msg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∞—Ä—Ö–∏–≤–æ–º
        no_archive_orgs = []
        for report in problem_reports:
            if "–Ω–µ—Ç –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –∫–∞–º–µ—Ä–∞—Ö" in report:
                org_name = report.split(": ")[0].replace("‚ùóÔ∏è ", "")
                no_archive_orgs.append(org_name)
        
        if no_archive_orgs:
            summary_message = f"üìã –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–º–∞–º –±–µ–∑ –∞—Ä—Ö–∏–≤–∞ ({len(no_archive_orgs)} –¥–æ–º–æ–≤):\n" + "\n".join(no_archive_orgs)
            send_telegram_message(summary_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if problem_reports:
            send_telegram_message(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problem_reports)}")
        else:
            send_telegram_message("‚úÖ –í—Å–µ –∫–∞–º–µ—Ä—ã –æ–Ω–ª–∞–π–Ω –∏ —Å –∞—Ä—Ö–∏–≤–æ–º.")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {processed_orgs}/{total_orgs}")
        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(problem_reports)}")

    except TimeoutError as e:
        total_time = time.time() - start_time
        print(f"‚ùå –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç: {e} (–ø—Ä–æ—à–ª–æ {total_time:.1f}—Å)")
    except KeyboardInterrupt:
        total_time = time.time() - start_time
        print(f"‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø—Ä–æ—à–ª–æ {total_time:.1f}—Å)")
    except Exception as e:
        total_time = time.time() - start_time
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e} (–ø—Ä–æ—à–ª–æ {total_time:.1f}—Å)")
        send_telegram_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    main()