import sys, io
import locale
import os
import signal
import atexit

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if sys.platform.startswith('win'):
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
else:
    # –î–ª—è Linux/Unix —Å–∏—Å—Ç–µ–º
    locale.setlocale(locale.LC_ALL, 'C.UTF-8')
    os.environ['PYTHONIOENCODING'] = 'utf-8'

import requests
import time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
script_running = True
start_time = None

def signal_handler(signum, frame):
    global script_running
    print(f"\n‚ùå –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    script_running = False
    sys.exit(0)

def cleanup():
    print("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤...")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    import requests
    requests.Session().close()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)
atexit.register(cleanup)

# ‚úÖ –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = "7557152702:AAEvMNfzLYWpkSdn7aXJp5qpPMR7aVySbE4"
TELEGRAM_CHAT_ID = 588116427
SPUTNIK_API_TOKEN = "1IWIwoxDUbCGEEZR6Lj6ExOY51U"

EXCLUDED_ORG_NAMES = ["ZZCameras"]

# ======= Telegram =======
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    max_length = 4000
    parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
    for part in parts:
        try:
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(part)} —Å–∏–º–≤–æ–ª–æ–≤...")
            resp = requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": part}, timeout=30)
            resp.raise_for_status()
            time.sleep(0.5)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ======= –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π GET =======
def get_json_with_retries(url, headers=None, retries=3, timeout=15):
    import ssl
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry
    from urllib3.poolmanager import PoolManager
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    session = requests.Session()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
    retry_strategy = Retry(
        total=retries,
        backoff_factor=0.5,  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        status_forcelist=[429, 500, 502, 503, 504],
        connect=2,  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        read=2,     # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–µ–Ω–∏—è
    )
    
    adapter = HTTPAdapter(
        max_retries=retry_strategy,
        pool_connections=10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool_maxsize=10,
        pool_block=False
    )
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    
    for attempt in range(retries):
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries} –¥–ª—è {url}")
            # –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
            resp = session.get(
                url, 
                headers=headers, 
                timeout=(5, timeout),  # (connect_timeout, read_timeout)
                verify=True,
                stream=False  # –û—Ç–∫–ª—é—á–∞–µ–º streaming –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            )
            resp.raise_for_status()
            result = resp.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å {url}")
            return result
            
        except (requests.exceptions.SSLError, ssl.SSLError) as e:
            print(f"‚ö† SSL –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}/{retries}: {e}")
            if attempt < retries - 1:
                time.sleep(1)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            else:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—É–µ–º –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
                try:
                    print(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {url}")
                    resp = session.get(url, headers=headers, timeout=(5, timeout), verify=False)
                    resp.raise_for_status()
                    result = resp.json()
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å {url}")
                    return result
                except Exception as final_e:
                    print(f"‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {final_e}")
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url}")
                    
        except requests.exceptions.Timeout as e:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}/{retries}: {e}")
            if attempt < retries - 1:
                time.sleep(1)
            else:
                raise Exception(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {url}")
                
        except requests.exceptions.ConnectionError as e:
            print(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt+1}/{retries}: {e}")
            if attempt < retries - 1:
                time.sleep(2)
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {url}")
                
        except Exception as e:
            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < retries - 1:
                time.sleep(1)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    session.close()
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url}")

# ======= –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ =======
def fetch_all_items(base_url, headers, limit=100):
    """–û–±—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    offset = 0
    all_items = []
    page_count = 0
    
    while True:
        page_count += 1
        url = f"{base_url}&limit={limit}&offset={offset}"
        print(f"üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}: {url}")
        
        try:
            data = get_json_with_retries(url, headers=headers, timeout=10)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_count}: {e}")
            break
            
        if not isinstance(data, list):
            print(f"‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_count}:", data)
            break
        if not data:
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
            break
            
        all_items.extend(data)
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}: –ø–æ–ª—É—á–µ–Ω–æ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—Å–µ–≥–æ: {len(all_items)}")
        
        if len(data) < limit:
            print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count} —Å {len(data)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            break
        offset += limit
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if page_count > 100:  # –ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–∞–Ω–∏—Ü
            print(f"‚ö† –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({page_count}), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
            break
            
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        time.sleep(0.1)
        
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
    return all_items

# ======= –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ =======
def get_organizations():
    base_url = "https://cameras.sputnik.systems/vsaas/api/v2/organizations?dummy=1"
    headers = {"Authorization": f"Bearer {SPUTNIK_API_TOKEN}"}
    return fetch_all_items(base_url, headers, limit=100)

# ======= –ö–∞–º–µ—Ä—ã =======
def get_cameras_for_org(org_id):
    base_url = f"https://cameras.sputnik.systems/vsaas/api/v2/cameras?organization_id={org_id}"
    headers = {"Authorization": f"Bearer {SPUTNIK_API_TOKEN}"}
    return fetch_all_items(base_url, headers, limit=100)

def to_bool(val):
    if isinstance(val, bool):
        return val
    if isinstance(val, int):
        return val != 0
    if isinstance(val, str):
        return val.lower() in ("true", "1", "yes", "on")
    return False

# ======= –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç =======
def build_report_for_org(org_name: str, cameras: list):
    if not cameras:
        return None
    problem_lines = []
    no_archive_count = 0
    no_archive_orgs = []
    
    for cam in cameras:
        cam_name = cam.get("name") or cam.get("title") or cam.get("label") or cam.get("id") or "(–ë–µ–∑ –∏–º–µ–Ω–∏)"
        online = cam.get("stream_status", {}).get("alive", False)
        archive = cam.get("dvr_depth", 0) > 0
        problems = []
        if not online:
            problems.append("‚ùå –ù–µ—Ç –æ–Ω–ª–∞–π–Ω")
        if not archive:
            no_archive_count += 1
            problems.append("‚ùå –ù–µ—Ç –∞—Ä—Ö–∏–≤–∞")
        if problems:
            problem_lines.append(f"üìç {cam_name} ‚Äî {', '.join(problems)}")
    
    if not problem_lines:
        return None  # –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–º–µ—Ä ‚Äî –Ω–µ –≤—ã–≤–æ–¥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    
    report = f"====================\nüè¢ {org_name}\n====================\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –≤—Å–µ—Ö –∫–∞–º–µ—Ä–∞—Ö
    if no_archive_count == len(cameras):
        return {"type": "no_archive_all", "org_name": org_name}
    else:
        report += "\n".join(problem_lines)
        return {"type": "normal", "content": report}

# ======= –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =======
def main():
    global script_running, start_time
    start_time = time.time()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä –≤ {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        start_message = f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–µ—Ä\n‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}"
        send_telegram_message(start_message)
        print("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ: {e}")
    
    try:
        orgs = get_organizations()
        if not isinstance(orgs, list):
            raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")

        problem_reports = []
        no_archive_orgs = []  # –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –±–µ–∑ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –≤—Å–µ—Ö –∫–∞–º–µ—Ä–∞—Ö
        total_orgs = len(orgs)
        processed_orgs = 0
        
        print(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_orgs} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...")
        
        for org in orgs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not script_running:
                print("‚ùå –°–∫—Ä–∏–ø—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                break
                
            processed_orgs += 1
            elapsed_time = time.time() - start_time
            
            # Heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if int(elapsed_time) % 30 == 0:
                print(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ {elapsed_time:.1f}—Å, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_orgs}/{total_orgs} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
            
            if elapsed_time > 300: # 5 –º–∏–Ω—É—Ç
                print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ({elapsed_time:.1f}—Å)")
                raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")
            try:
                org_name = org.get("name") or org.get("title") or org.get("label")
                org_id = org.get("id")

                if not org_name or not org_id:
                    print(f"‚ö† –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ ID: {org}")
                    continue

                if org_name in EXCLUDED_ORG_NAMES:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {org_name} (id={org_id})")
                    continue

                print(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {org_name} (id={org_id})")
                cams_data = get_cameras_for_org(org_id)
                if not isinstance(cams_data, list):
                    print(f"‚ö† –ü—Ä–æ–ø—É—Å–∫ {org_name}: —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –Ω–µ —Å–ø–∏—Å–æ–∫")
                    continue
                if not cams_data:
                    print(f"‚Ñπ –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name} –Ω–µ—Ç –∫–∞–º–µ—Ä.")
                    continue

                # –õ–æ–≥ –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–º–µ—Ä—ã)
                if cams_data:
                    print(f"üõ† –ü–µ—Ä–≤–∞—è –∫–∞–º–µ—Ä–∞: {cams_data[0]}")

                report = build_report_for_org(org_name, cams_data)
                if report:
                    if report["type"] == "no_archive_all":
                        no_archive_orgs.append(report["org_name"])
                    else:
                        problem_reports.append(report["content"])

            except KeyboardInterrupt:
                print("‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {org.get('name', 'Unknown')}: {e}")
                continue

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if no_archive_orgs:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–º–∞—Ö –±–µ–∑ –∞—Ä—Ö–∏–≤–∞
            no_archive_message = f"‚ùóÔ∏è –ù–ï–¢ –ê–†–•–ò–í–ê –ù–ê –í–°–ï–• –ö–ê–ú–ï–†–ê–•:\n\n" + "\n".join([f"üè¢ {org}" for org in no_archive_orgs])
            send_telegram_message(no_archive_message)
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ {len(no_archive_orgs)} –¥–æ–º–∞—Ö –±–µ–∑ –∞—Ä—Ö–∏–≤–∞")
        
        if problem_reports:
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            send_telegram_message("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–∞–º–µ—Ä –æ–Ω–ª–∞–π–Ω –∏ —Å –∞—Ä—Ö–∏–≤–æ–º.")
            for report in problem_reports:
                send_telegram_message(report)
        elif not no_archive_orgs:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º –≤–æ–æ–±—â–µ
            send_telegram_message("‚úÖ –í—Å–µ –∫–∞–º–µ—Ä—ã –æ–Ω–ª–∞–π–Ω –∏ —Å –∞—Ä—Ö–∏–≤–æ–º.")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {processed_orgs}/{total_orgs}")
        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(problem_reports)}")
        print(f"üè¢ –î–æ–º–æ–≤ –±–µ–∑ –∞—Ä—Ö–∏–≤–∞: {len(no_archive_orgs)}")

    except TimeoutError as e:
        total_time = time.time() - start_time
        error_message = f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (–ø—Ä–æ—à–ª–æ {total_time:.1f}—Å)"
        print(error_message)
        try:
            send_telegram_message(error_message)
        except:
            pass
    except KeyboardInterrupt:
        total_time = time.time() - start_time
        error_message = f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø—Ä–æ—à–ª–æ {total_time:.1f}—Å)"
        print(error_message)
        try:
            send_telegram_message(error_message)
        except:
            pass
    except Exception as e:
        total_time = time.time() - start_time
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e} (–ø—Ä–æ—à–ª–æ {total_time:.1f}—Å)"
        print(error_message)
        try:
            send_telegram_message(error_message)
        except:
            pass
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()