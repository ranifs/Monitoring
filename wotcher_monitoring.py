import sys, io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

import requests
import time

# ‚úÖ –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_BOT_TOKEN = "7557152702:AAEvMNfzLYWpkSdn7aXJp5qpPMR7aVySbE4"
TELEGRAM_CHAT_ID = 588116427
SPUTNIK_API_TOKEN = "1IWIwoxDUbCGEEZR6Lj6ExOY51U"

EXCLUDED_ORG_NAMES = ["ZZCameras"]

# ======= Telegram =======
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    max_length = 4000
    parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
    for part in parts:
        try:
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(part)} —Å–∏–º–≤–æ–ª–æ–≤...")
            resp = requests.post(url, data={"chat_id": TELEGRAM_CHAT_ID, "text": part}, timeout=30)
            resp.raise_for_status()
            time.sleep(0.5)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ======= –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π GET =======
def get_json_with_retries(url, headers=None, retries=3, timeout=30):
    for attempt in range(retries):
        try:
            resp = requests.get(url, headers=headers, timeout=timeout)
            resp.raise_for_status()
            return resp.json()
        except Exception as e:
            print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            time.sleep(2)
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url}")

# ======= –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ =======
def fetch_all_items(base_url, headers, limit=100):
    """–û–±—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    offset = 0
    all_items = []
    while True:
        url = f"{base_url}&limit={limit}&offset={offset}"
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º {url}")
        data = get_json_with_retries(url, headers=headers)
        if not isinstance(data, list):
            print("‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", data)
            break
        if not data:
            break
        all_items.extend(data)
        if len(data) < limit:
            break
        offset += limit
    return all_items

# ======= –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ =======
def get_organizations():
    base_url = "https://cameras.sputnik.systems/vsaas/api/v2/organizations?dummy=1"
    headers = {"Authorization": f"Bearer {SPUTNIK_API_TOKEN}"}
    return fetch_all_items(base_url, headers, limit=100)

# ======= –ö–∞–º–µ—Ä—ã =======
def get_cameras_for_org(org_id):
    base_url = f"https://cameras.sputnik.systems/vsaas/api/v2/cameras?organization_id={org_id}"
    headers = {"Authorization": f"Bearer {SPUTNIK_API_TOKEN}"}
    return fetch_all_items(base_url, headers, limit=100)

def to_bool(val):
    if isinstance(val, bool):
        return val
    if isinstance(val, int):
        return val != 0
    if isinstance(val, str):
        return val.lower() in ("true", "1", "yes", "on")
    return False

# ======= –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç =======
def build_report_for_org(org_name: str, cameras: list):
    if not cameras:
        return None
    problem_lines = []
    no_archive_count = 0
    for cam in cameras:
        cam_name = cam.get("name") or cam.get("title") or cam.get("label") or cam.get("id") or "(–ë–µ–∑ –∏–º–µ–Ω–∏)"
        online = cam.get("stream_status", {}).get("alive", False)
        archive = cam.get("dvr_depth", 0) > 0
        problems = []
        if not online:
            problems.append("‚ùå –ù–µ—Ç –æ–Ω–ª–∞–π–Ω")
        if not archive:
            no_archive_count += 1
            problems.append("‚ùå –ù–µ—Ç –∞—Ä—Ö–∏–≤–∞")
        if problems:
            problem_lines.append(f"üìç {cam_name} ‚Äî {', '.join(problems)}")
    if not problem_lines:
        return None  # –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–º–µ—Ä ‚Äî –Ω–µ –≤—ã–≤–æ–¥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    report = f"====================\nüè¢ {org_name}\n====================\n"
    if no_archive_count == len(cameras):
        report += "‚ùó –ù–µ—Ç –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –≤—Å–µ—Ö –∫–∞–º–µ—Ä–∞—Ö!\n"
    else:
        report += "\n".join(problem_lines)
    return report

# ======= –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =======
def main():
    start_time = time.time()
    try:
        orgs = get_organizations()
        if not isinstance(orgs, list):
            raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")

        problem_reports = []
        for org in orgs:
            if time.time() - start_time > 300: # 5 –º–∏–Ω—É—Ç
                raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")
            try:
                org_name = org.get("name") or org.get("title") or org.get("label")
                org_id = org.get("id")

                if org_name in EXCLUDED_ORG_NAMES:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {org_name} (id={org_id})")
                    continue

                print(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {org_name} (id={org_id})")
                cams_data = get_cameras_for_org(org_id)
                if not isinstance(cams_data, list):
                    print(f"‚ö† –ü—Ä–æ–ø—É—Å–∫ {org_name}: —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä –Ω–µ —Å–ø–∏—Å–æ–∫")
                    continue
                if not cams_data:
                    print(f"‚Ñπ –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_name} –Ω–µ—Ç –∫–∞–º–µ—Ä.")
                    continue

                # –õ–æ–≥ –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã
                print(f"üõ† –ü–µ—Ä–≤–∞—è –∫–∞–º–µ—Ä–∞: {cams_data[0]}")

                report = build_report_for_org(org_name, cams_data)
                if report:
                    problem_reports.append(report)

            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {org.get('name')}: {e}")
                continue

        if problem_reports:
            send_telegram_message("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–∞–º–µ—Ä –æ–Ω–ª–∞–π–Ω –∏ —Å –∞—Ä—Ö–∏–≤–æ–º.")
            for report in problem_reports:
                send_telegram_message(report)
        else:
            send_telegram_message("‚úÖ –í—Å–µ –∫–∞–º–µ—Ä—ã –æ–Ω–ª–∞–π–Ω –∏ —Å –∞—Ä—Ö–∏–≤–æ–º.")

    except TimeoutError as e:
        print(f"‚ùå –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç: {e}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()